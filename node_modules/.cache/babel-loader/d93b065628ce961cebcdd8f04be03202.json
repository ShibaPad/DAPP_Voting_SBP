{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let voteresult = await store.getState().blockchain.smartContract.methods.voteresults().call();\n      dispatch(fetchDataSuccess({\n        totalSupply,\n        voteresult // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/ShibaPad/SBP_VOTING_DAPP/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","voteresult","getState","blockchain","smartContract","methods","voteresults","call","totalSupply","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AAEF,UAAIO,UAAU,GAAG,MAAMR,KAAK,CAC3BS,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWC,WAFX,GAGtBC,IAHsB,EAAvB;AAKAP,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfY,QAAAA,WADe;AAEfP,QAAAA,UAFe,CAGf;;AAHe,OAAD,CADV,CAAR;AAOD,KAdD,CAcE,OAAOQ,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAT,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GApBD;AAqBD,CAtBM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n\n      let voteresult = await store\n      .getState()\n      .blockchain.smartContract.methods.voteresults()\n      .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          voteresult,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}