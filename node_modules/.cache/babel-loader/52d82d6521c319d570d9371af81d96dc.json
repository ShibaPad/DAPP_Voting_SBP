{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/user/Desktop/\\uC0C8 \\uD3F4\\uB354/SBP_VOTING_DAPPs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/user/Desktop/\\uC0C8 \\uD3F4\\uB354/SBP_VOTING_DAPPs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";import Web3Modal from\"web3modal\";import WalletConnectProvider from\"@walletconnect/web3-provider\";// log\nimport{fetchData}from\"../data/dataActions\";var providerOptions={walletconnect:{package:WalletConnectProvider,options:{// Mikko's test key - don't copy as your mileage may vary\ninfuraId:\"8043bb2cf99347b1bfadfb233c5325c0\",rpc:{56:\"https://bsc-dataseed.binance.org/\"}}}};var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var abiResponse,abi,configResponse,CONFIG,web3Modal,provider,web3,networkId,accounts,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_context.next=3;return fetch(\"/config/abi.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 3:abiResponse=_context.sent;_context.next=6;return abiResponse.json();case 6:abi=_context.sent;_context.next=9;return fetch(\"/config/config.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 9:configResponse=_context.sent;_context.next=12;return configResponse.json();case 12:CONFIG=_context.sent;web3Modal=new Web3Modal({cacheProvider:false,// optional\nproviderOptions:providerOptions// required\n// disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n});_context.prev=14;_context.next=17;return web3Modal.connect();case 17:provider=_context.sent;_context.next=24;break;case 20:_context.prev=20;_context.t0=_context[\"catch\"](14);console.log(\"Could not get a wallet connection\",_context.t0);return _context.abrupt(\"return\");case 24:web3=new Web3(provider);Web3EthContract.setProvider(provider);_context.prev=26;_context.next=29;return web3.eth.getChainId();case 29:networkId=_context.sent;_context.next=32;return web3.eth.getAccounts();case 32:accounts=_context.sent;if(networkId==CONFIG.NETWORK.ID){SmartContractObj=new Web3EthContract(abi,CONFIG.CONTRACT_ADDRESS);dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nprovider.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});// Subscribe to chainId change\nprovider.on(\"chainChanged\",function(chainId){window.location.reload();});}else{dispatch(connectFailed(\"Change network to \".concat(CONFIG.NETWORK.NAME,\".\")));}_context.next=39;break;case 36:_context.prev=36;_context.t1=_context[\"catch\"](26);dispatch(connectFailed(\"Something went wrong.\"));case 39:case\"end\":return _context.stop();}}},_callee,null,[[14,20],[26,36]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/user/Desktop/새 폴더/SBP_VOTING_DAPPs/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","fetchData","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","fetch","headers","Accept","abiResponse","json","abi","configResponse","CONFIG","web3Modal","cacheProvider","provider","console","log","web3","setProvider","eth","getChainId","networkId","getAccounts","accounts","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","chainId","window","location","reload","NAME"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n\n    options: {\n      // Mikko's test key - don't copy as your mileage may vary\n      infuraId: \"8043bb2cf99347b1bfadfb233c5325c0\",\n      rpc: {\n        56: \"https://bsc-dataseed.binance.org/\",\n      },\n    },\n  },\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    let web3Modal = new Web3Modal({\n      cacheProvider: false, // optional\n      providerOptions, // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n    });\n    let provider;\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log(\"Could not get a wallet connection\", e);\n      return;\n    }\n\n    const web3 = new Web3(provider);\n\n    Web3EthContract.setProvider(provider);\n    try {\n      const networkId = await web3.eth.getChainId();\n      const accounts = await web3.eth.getAccounts();\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        // Subscribe to chainId change\n        provider.on(\"chainChanged\", (chainId) => {\n          window.location.reload();\n        });\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      dispatch(connectFailed(\"Something went wrong.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}