{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData2 = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let voteDescription = await store.getState().blockchain.smartContract.methods.voteDescription().call(); // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        voteDescription // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let totalSupply = await store.getState().blockchain.smartContract.methods.voteresults().call(); // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        totalSupply // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/ShibaPad/SBP_VOTING_DAPP/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData2","dispatch","voteDescription","getState","blockchain","smartContract","methods","call","err","console","log","fetchData","totalSupply","voteresults"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIO,eAAe,GAAG,MAAMR,KAAK,CAC9BS,QADyB,GAEzBC,UAFyB,CAEdC,aAFc,CAEAC,OAFA,CAEQJ,eAFR,GAGzBK,IAHyB,EAA5B,CADE,CAKF;AACA;AACA;AACA;;AAEAN,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfK,QAAAA,eADe,CAEf;;AAFe,OAAD,CADV,CAAR;AAMD,KAhBD,CAgBE,OAAOM,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAP,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GAtBD;AAuBD,CAxBM;AA0BP,OAAO,MAAMY,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAOV,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIiB,WAAW,GAAG,MAAMlB,KAAK,CAC1BS,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYO,WAFZ,GAGrBN,IAHqB,EAAxB,CADE,CAKF;AACA;AACA;AACA;;AAEAN,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfe,QAAAA,WADe,CAEf;;AAFe,OAAD,CADV,CAAR;AAMD,KAhBD,CAgBE,OAAOJ,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAP,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GAtBD;AAuBD,CAxBM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData2 = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let voteDescription = await store\n        .getState()\n        .blockchain.smartContract.methods.voteDescription()\n        .call();\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(\n        fetchDataSuccess({\n          voteDescription,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.voteresults()\n        .call();\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}