{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      // Mikko's test key - don't copy as your mileage may vary\n      infuraId: \"8043bb2cf99347b1bfadfb233c5325c0\",\n      rpc: {\n        56: \"https://bsc-dataseed.binance.org/\"\n      }\n    }\n  }\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    let web3Modal = new Web3Modal({\n      cacheProvider: false,\n      // optional\n      providerOptions // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n\n    });\n    let provider;\n\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log(\"Could not get a wallet connection\", e);\n      return;\n    }\n\n    const web3 = new Web3(provider);\n    Web3EthContract.setProvider(provider);\n\n    try {\n      const networkId = await web3.eth.getChainId();\n      const accounts = await web3.eth.getAccounts();\n\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n        dispatch(connectSuccess({\n          account: accounts[0],\n          smartContract: SmartContractObj,\n          web3: web3\n        })); // Add listeners start\n\n        provider.on(\"accountsChanged\", accounts => {\n          dispatch(updateAccount(accounts[0]));\n        }); // Subscribe to chainId change\n\n        provider.on(\"chainChanged\", chainId => {\n          window.location.reload();\n        });\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      dispatch(connectFailed(\"Something went wrong.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/새 폴더/SBP_VOTING_DAPPs/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","fetchData","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","web3Modal","cacheProvider","provider","e","console","log","web3","setProvider","networkId","eth","getChainId","accounts","getAccounts","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","chainId","window","location","reload","NAME","err"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n\n    options: {\n      // Mikko's test key - don't copy as your mileage may vary\n      infuraId: \"8043bb2cf99347b1bfadfb233c5325c0\",\n      rpc: {\n        56: \"https://bsc-dataseed.binance.org/\",\n      },\n    },\n  },\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    let web3Modal = new Web3Modal({\n      cacheProvider: false, // optional\n      providerOptions, // required\n      // disableInjectedProvider: true, // optional. For MetaMask / Brave / Opera.\n    });\n    let provider;\n    try {\n      provider = await web3Modal.connect();\n    } catch (e) {\n      console.log(\"Could not get a wallet connection\", e);\n      return;\n    }\n\n    const web3 = new Web3(provider);\n\n    Web3EthContract.setProvider(provider);\n    try {\n      const networkId = await web3.eth.getChainId();\n      const accounts = await web3.eth.getAccounts();\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        // Subscribe to chainId change\n        provider.on(\"chainChanged\", (chainId) => {\n          window.location.reload();\n        });\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      dispatch(connectFailed(\"Something went wrong.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}